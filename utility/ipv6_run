#!/bin/bash
# Usage: ipv6_run.sh <interface> <program> <arguments>

# Root only
if [ "$(id -u)" != "0" ]; then
    echo "This script must be run as root" 1>&2
    exit 1
fi

interface=$1
# Generate a random string for interface name
macvlan_interface=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 6 | head -n 1)

echo "Creating macvlan interface $macvlan_interface" > /dev/stderr
ip link add $macvlan_interface link $interface type macvlan mode bridge

# Generate a random string for the network namespace
netns_name=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 6 | head -n 1)
echo "Creating network namespace $netns_name" > /dev/stderr
# Create the network namespace
ip netns add $netns_name
# Move the created macvlan interface into the network namespace
ip link set $macvlan_interface netns $netns_name

# Bring up loopback interface(it doesn't work without it)
ip netns exec $netns_name ip link set lo up

# Bring up the macvlan interface in the network namespace
ip netns exec $netns_name ip link set $macvlan_interface up

# Request an ipv6 address from dhcp
echo "Requesting ipv6 address from dhcp" > /dev/stderr

# If dhcpcd is not installed, use dhclient instead
if command -v dhcpcd > /dev/null; then
    echo "dhcpcd is installed, using it" > /dev/stderr
    ip netns exec $netns_name dhcpcd -6 $macvlan_interface
else
    echo "dhcpcd is not installed, using dhclient instead" > /dev/stderr
    ip netns exec $netns_name dhclient -6 -v $macvlan_interface
fi
echo "Got ipv6 address" > /dev/stderr

# Wait for the ipv6 to work(timeout of 60 seconds)
echo "Waiting for ipv6 to work" > /dev/stderr
timeout=60
while [ $timeout -gt 0 ]; do
    if ip netns exec $netns_name ping -6 -c 1 -w 1 google.com > /dev/null 2>&1; then
        echo "ipv6 is working" > /dev/stderr
        break
    fi
    sleep 1
    timeout=$((timeout-1))
done

if [ $timeout -eq 0 ]; then
    echo "ipv6 is not working" > /dev/stderr
    exit 1
fi

# Execute the program in the network namespace
echo "Starting program" > /dev/stderr
# Remove the first argument(the interface name)
shift
ip netns exec $netns_name "$@"
echo "Program finished, cleaning up" > /dev/stderr

# Cleanup
ip netns exec $netns_name ip link set $macvlan_interface down
ip netns exec $netns_name ip link delete $macvlan_interface
ip netns del $netns_name
